{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programa\u00e7\u00e3o Competitiva Ementa Revis\u00e3o de conceitos de programa\u00e7\u00e3o e algoritmos. Fundamentos de an\u00e1lise de algoritmos. Algoritmos de busca e ordena\u00e7\u00e3o. Estrutura de dados b\u00e1sicas e avan\u00e7adas. Teoria dos n\u00fameros. Paradigmas de solu\u00e7\u00f5es de problemas: busca exaustiva, dividir para conquistar, algoritmo guloso e programa\u00e7\u00e3o din\u00e2mica. Grafos. Processamento de strings. Geometria computacional. Objetivos Introduzir t\u00e9cnicas de programa\u00e7\u00e3o e no\u00e7\u00f5es de complexidade de algoritmos; Familiariza\u00e7\u00e3o com ambientes de treinamento de competi\u00e7\u00f5es de programa\u00e7\u00e3o; Estudar estruturas de dados b\u00e1sicas e avan\u00e7adas comumente utilizadas em competi\u00e7\u00f5es de programa\u00e7\u00e3o; Estudar algoritmos eficientes de busca e ordena\u00e7\u00e3o de dados; Estudar diferentes teorias de n\u00fameros; Apresentar e estudar diferentes tipos de paradigmas de solu\u00e7\u00f5es de problemas; Apresentar os conceitos e os principais algoritmos de grafos; Apresentar e estudar os algoritmos de processamento de strings e geometria computacional; Identificar qual o melhor algoritmo ou estrat\u00e9gia deve ser usada para resolver diferentes problemas. Programas e Sites Programar offline: GCC (Linux) / MinGW (Windows) VS Code / Sublime Text Programar online: CS50 IDE VSCode for CS50 Judge: Maratona Bibliografia Competitive Programmer\u2019s Handbook Principles of Algorithmic Problem Solving Algorithms for Competitive Programming An Introduction to the USA Computing Olympiad Dynamic Programming for Computing Contest Algorithms Learn C++ Notebooks Stanford University Royal Institute of Technology","title":"Disciplina"},{"location":"#programacao-competitiva","text":"","title":"Programa\u00e7\u00e3o Competitiva"},{"location":"#ementa","text":"Revis\u00e3o de conceitos de programa\u00e7\u00e3o e algoritmos. Fundamentos de an\u00e1lise de algoritmos. Algoritmos de busca e ordena\u00e7\u00e3o. Estrutura de dados b\u00e1sicas e avan\u00e7adas. Teoria dos n\u00fameros. Paradigmas de solu\u00e7\u00f5es de problemas: busca exaustiva, dividir para conquistar, algoritmo guloso e programa\u00e7\u00e3o din\u00e2mica. Grafos. Processamento de strings. Geometria computacional.","title":"Ementa"},{"location":"#objetivos","text":"Introduzir t\u00e9cnicas de programa\u00e7\u00e3o e no\u00e7\u00f5es de complexidade de algoritmos; Familiariza\u00e7\u00e3o com ambientes de treinamento de competi\u00e7\u00f5es de programa\u00e7\u00e3o; Estudar estruturas de dados b\u00e1sicas e avan\u00e7adas comumente utilizadas em competi\u00e7\u00f5es de programa\u00e7\u00e3o; Estudar algoritmos eficientes de busca e ordena\u00e7\u00e3o de dados; Estudar diferentes teorias de n\u00fameros; Apresentar e estudar diferentes tipos de paradigmas de solu\u00e7\u00f5es de problemas; Apresentar os conceitos e os principais algoritmos de grafos; Apresentar e estudar os algoritmos de processamento de strings e geometria computacional; Identificar qual o melhor algoritmo ou estrat\u00e9gia deve ser usada para resolver diferentes problemas.","title":"Objetivos"},{"location":"#programas-e-sites","text":"Programar offline: GCC (Linux) / MinGW (Windows) VS Code / Sublime Text Programar online: CS50 IDE VSCode for CS50 Judge: Maratona","title":"Programas e Sites"},{"location":"#bibliografia","text":"Competitive Programmer\u2019s Handbook Principles of Algorithmic Problem Solving Algorithms for Competitive Programming An Introduction to the USA Computing Olympiad Dynamic Programming for Computing Contest Algorithms Learn C++","title":"Bibliografia"},{"location":"#notebooks","text":"Stanford University Royal Institute of Technology","title":"Notebooks"},{"location":"buscaexaustiva/","text":"Busca Exaustiva (Recurs\u00e3o + Backtracking) Em constru\u00e7\u00e3o...","title":"Busca Exaustiva"},{"location":"buscaexaustiva/#busca-exaustiva-recursao-backtracking","text":"Em constru\u00e7\u00e3o...","title":"Busca Exaustiva (Recurs\u00e3o + Backtracking)"},{"location":"ed/","text":"Estrutura de Dados Em constru\u00e7\u00e3o...","title":"Estrutura de Dados"},{"location":"ed/#estrutura-de-dados","text":"Em constru\u00e7\u00e3o...","title":"Estrutura de Dados"},{"location":"gc/","text":"Geometria Computacional Em constru\u00e7\u00e3o...","title":"Geometria Computacional"},{"location":"gc/#geometria-computacional","text":"Em constru\u00e7\u00e3o...","title":"Geometria Computacional"},{"location":"grafos/","text":"Grafos Em constru\u00e7\u00e3o...","title":"Grafos"},{"location":"grafos/#grafos","text":"Em constru\u00e7\u00e3o...","title":"Grafos"},{"location":"guloso/","text":"Algoritmos Gulosos Em constru\u00e7\u00e3o...","title":"Algoritmos Gulosos"},{"location":"guloso/#algoritmos-gulosos","text":"Em constru\u00e7\u00e3o...","title":"Algoritmos Gulosos"},{"location":"inicio/","text":"Programa\u00e7\u00e3o Competitiva Vamos come\u00e7ar apresentando alguns dos recursos da linguagem de programa\u00e7\u00e3o C++ que s\u00e3o \u00fateis na programa\u00e7\u00e3o competitiva. Todos os comandos ser\u00e3o dados considerando o Linux como Sistema Operaciona. Caso esteja usando Windows, use o CS50 IDE ou VSCode for CS50 . Caracteristicas da linguagem 1 2 3 4 5 6 7 8 #include <bits/stdc++.h> // (1) using namespace std ; // (2) int main () { // c\u00f3digo return 0 ; } Recurso do compilador g++ que permite incluir toda a biblioteca padr\u00e3o. Assim, n\u00e3o \u00e9 necess\u00e1rio incluir separadamente bibliotecas como iostream , vector , e algorithm . Clique aqui para saber mais . Declara que as classes e fun\u00e7\u00f5es da biblioteca padr\u00e3o podem ser usadas diretamente no c\u00f3digo. Sem essa linha ter\u00edamos que escrever, por exemplo, std::cout ao inv\u00e9s de apenas cout . O c\u00f3digo pode ser compilado usando o seguinte comando: g++ main.cpp -o programa O comando produz um arquivo bin\u00e1rio, chamado programa , a partir do c\u00f3digo-fonte main.cpp . Leia mais aqui . Para evitar bugs comuns, sempre iremos compilar o c\u00f3digo com algumas flags de compila\u00e7\u00e3o: g++ -O2 -std = c++17 -Wshadow -fsanitize = address,undefined -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-but-set-variable main.cpp -o programa Para facilitar a compila\u00e7\u00e3o e execu\u00e7\u00e3o do c\u00f3digo, crie um arquivo chamado cr e adicione o seguinte c\u00f3digo: g++ -O2 -std = c++17 -Wshadow -fsanitize = address,undefined -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-but-set-variable $1 -o programa && time ./programa < in No terminal, execute o comando chmod +x cr para dar direitos de execu\u00e7\u00e3o ao arquivo cr . Para us\u00e1-lo basta passar como argumento um arquivo .cpp , por exemplo, ./cr main.cpp . O c\u00f3digo ser\u00e1 compilado e, em caso de sucesso, ser\u00e1 gerado um programa chamado programa que ser\u00e1 executado considerando o arquivo in como dado de entrada. Ao usar o arquivo in , n\u00e3o precisamos digitar os dados de entrada. Entrada e Sa\u00edda Na maioria dos contests , \u00e9 necess\u00e1rio ler da entrada padr\u00e3o (teclado) e escrever algo. Em C++, \u00e9 usado o cin para leitura e cout para sa\u00edda. Tamb\u00e9m podem ser usado as fun\u00e7\u00f5es de C, como scanf e printf . A entrada do programa geralmente consiste em n\u00fameros e strings separados por espa\u00e7os e/ou novas linhas. Eles podem ser lidos a partir do cin da seguinte forma: 1 2 3 int a , b ; string c ; cin >> a >> b >> c ; Considerando que h\u00e1 ao menos um espa\u00e7o em branco ou uma nova linha entre cada elemento da entrada, esse c\u00f3digo sempre funciona. O cout pode ser usado da seguinte forma: 1 cout << a << \" \" << b << \" \" << c << \" \\n \" ; // (1) Um espa\u00e7o em branco ir\u00e1 separar cada informa\u00e7\u00e3o. Ao fim, uma linha em branco ( \\ n ) ser\u00e1 gerada. \u00c0s vezes, a entrada e a sa\u00edda podem ser um gargalo em um programa. Por isso, \u00e9 comum ser adicionado as seguintes linhas no in\u00edcio do c\u00f3digo: 1 2 ios_base :: sync_with_stdio ( 0 ); // (1) cin . tie ( 0 ); // (2) std::ios_base::sync_with_stdio std::ios::tie Aten\u00e7\u00e3o Ao usar o comando ios_base :: sync_with_stdio ( 0 ); , ser\u00e1 desativado a sincroniza\u00e7\u00e3o entre as fun\u00e7\u00e3o de C++ e C, por isso n\u00e3o use as fun\u00e7\u00e3o de entrada e sa\u00edda de C ( scanf e printf ) junto com esse comando. Alternativamente ao \\n podemos usar o comando endl . Entretanto, este comando ir\u00e1 liberar o buffer de sa\u00edda e far\u00e1 com que o c\u00f3digo rode mais lento. Por isso, prefira usar o \\n . Dica Use sempre o \\n ao inv\u00e9s do endl . Use uma macro #define endl '\\n' para n\u00e3o correr o risco de esquecer. Para se aprofundar mais: Input & Output Fast Input & Output Trabalhando com n\u00fameros Inteiros: Para evitar integer overflow , use sempre long long (64bits) ao inv\u00e9s de int . Reais: Use double (64bits) ou long double (80bits). Esque\u00e7a o float \ud83d\ude05. Al\u00e9m disso, nunca compare dois double com o operador == (\u00e9 poss\u00edvel que os valores sejam iguais, mas n\u00e3o s\u00e3o devido a erros de precis\u00e3o). Para verificar se dois double use o c\u00f3digo a seguir: 1 2 3 4 5 6 double a , b ; ... if ( abs ( a - b ) < 1e-9 ) { //a e b s\u00e3o iguais } ... Para saber mais: Data Types Simplificando o c\u00f3digo Nomes de tipos Usando o comando typedef \u00e9 poss\u00edvel dar um nome mais curto a um tipo de dado. Por exemplo: 1 2 3 4 5 6 7 typedef long long ll ; typedef vector < int > vi ; typedef vector < ll > vll ; typedef pair < int , int > pi ; typedef pair < ll , ll > pll ; typedef vector < pii > vpi ; typedef vector < pll > vpll ; Macros Uma macro significa que certas palavras no c\u00f3digo ser\u00e3o substitu\u00eddas antes da compila\u00e7\u00e3o. Em C++, as macros s\u00e3o definidas usando a palavra-chave #define . Veja alguns exemplos: 1 2 3 4 5 6 7 8 9 10 11 #define F first #define S second #define PB push_back #define MP make_pair #define FOR(i,a,b) for(ll i = (a); i < (ll)(b); ++i) #define INF 0x3f3f3f3f #define INFLL 0x3f3f3f3f3f3f3f3f #define all(x) x.begin(),x.end() #define sz(x) (ll)x.size() #define MOD 1000000007ll #define endl '\\n' Assim, por exemplo, o c\u00f3digo for ( long long i = 0 ; i < n ; ++ i ) pode ser simplificado por FOR ( i , 0 , n ) . Manipula\u00e7\u00e3o de bits Dicas e truques de C++ A seguir, s\u00e3o listados alguns links com dicas e truques de C++ \u00fateis para programa\u00e7\u00e3o competitiva. Leia todos com aten\u00e7\u00e3o: C++ tips and tricks Top 20 C++ Tricks for Competitive Programming Truques de programa\u00e7\u00e3o competitiva para programadores de C++","title":"Inicio"},{"location":"inicio/#programacao-competitiva","text":"Vamos come\u00e7ar apresentando alguns dos recursos da linguagem de programa\u00e7\u00e3o C++ que s\u00e3o \u00fateis na programa\u00e7\u00e3o competitiva. Todos os comandos ser\u00e3o dados considerando o Linux como Sistema Operaciona. Caso esteja usando Windows, use o CS50 IDE ou VSCode for CS50 .","title":"Programa\u00e7\u00e3o Competitiva"},{"location":"inicio/#caracteristicas-da-linguagem","text":"1 2 3 4 5 6 7 8 #include <bits/stdc++.h> // (1) using namespace std ; // (2) int main () { // c\u00f3digo return 0 ; } Recurso do compilador g++ que permite incluir toda a biblioteca padr\u00e3o. Assim, n\u00e3o \u00e9 necess\u00e1rio incluir separadamente bibliotecas como iostream , vector , e algorithm . Clique aqui para saber mais . Declara que as classes e fun\u00e7\u00f5es da biblioteca padr\u00e3o podem ser usadas diretamente no c\u00f3digo. Sem essa linha ter\u00edamos que escrever, por exemplo, std::cout ao inv\u00e9s de apenas cout . O c\u00f3digo pode ser compilado usando o seguinte comando: g++ main.cpp -o programa O comando produz um arquivo bin\u00e1rio, chamado programa , a partir do c\u00f3digo-fonte main.cpp . Leia mais aqui . Para evitar bugs comuns, sempre iremos compilar o c\u00f3digo com algumas flags de compila\u00e7\u00e3o: g++ -O2 -std = c++17 -Wshadow -fsanitize = address,undefined -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-but-set-variable main.cpp -o programa Para facilitar a compila\u00e7\u00e3o e execu\u00e7\u00e3o do c\u00f3digo, crie um arquivo chamado cr e adicione o seguinte c\u00f3digo: g++ -O2 -std = c++17 -Wshadow -fsanitize = address,undefined -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-but-set-variable $1 -o programa && time ./programa < in No terminal, execute o comando chmod +x cr para dar direitos de execu\u00e7\u00e3o ao arquivo cr . Para us\u00e1-lo basta passar como argumento um arquivo .cpp , por exemplo, ./cr main.cpp . O c\u00f3digo ser\u00e1 compilado e, em caso de sucesso, ser\u00e1 gerado um programa chamado programa que ser\u00e1 executado considerando o arquivo in como dado de entrada. Ao usar o arquivo in , n\u00e3o precisamos digitar os dados de entrada.","title":"Caracteristicas da linguagem"},{"location":"inicio/#entrada-e-saida","text":"Na maioria dos contests , \u00e9 necess\u00e1rio ler da entrada padr\u00e3o (teclado) e escrever algo. Em C++, \u00e9 usado o cin para leitura e cout para sa\u00edda. Tamb\u00e9m podem ser usado as fun\u00e7\u00f5es de C, como scanf e printf . A entrada do programa geralmente consiste em n\u00fameros e strings separados por espa\u00e7os e/ou novas linhas. Eles podem ser lidos a partir do cin da seguinte forma: 1 2 3 int a , b ; string c ; cin >> a >> b >> c ; Considerando que h\u00e1 ao menos um espa\u00e7o em branco ou uma nova linha entre cada elemento da entrada, esse c\u00f3digo sempre funciona. O cout pode ser usado da seguinte forma: 1 cout << a << \" \" << b << \" \" << c << \" \\n \" ; // (1) Um espa\u00e7o em branco ir\u00e1 separar cada informa\u00e7\u00e3o. Ao fim, uma linha em branco ( \\ n ) ser\u00e1 gerada. \u00c0s vezes, a entrada e a sa\u00edda podem ser um gargalo em um programa. Por isso, \u00e9 comum ser adicionado as seguintes linhas no in\u00edcio do c\u00f3digo: 1 2 ios_base :: sync_with_stdio ( 0 ); // (1) cin . tie ( 0 ); // (2) std::ios_base::sync_with_stdio std::ios::tie Aten\u00e7\u00e3o Ao usar o comando ios_base :: sync_with_stdio ( 0 ); , ser\u00e1 desativado a sincroniza\u00e7\u00e3o entre as fun\u00e7\u00e3o de C++ e C, por isso n\u00e3o use as fun\u00e7\u00e3o de entrada e sa\u00edda de C ( scanf e printf ) junto com esse comando. Alternativamente ao \\n podemos usar o comando endl . Entretanto, este comando ir\u00e1 liberar o buffer de sa\u00edda e far\u00e1 com que o c\u00f3digo rode mais lento. Por isso, prefira usar o \\n . Dica Use sempre o \\n ao inv\u00e9s do endl . Use uma macro #define endl '\\n' para n\u00e3o correr o risco de esquecer. Para se aprofundar mais: Input & Output Fast Input & Output","title":"Entrada e Sa\u00edda"},{"location":"inicio/#trabalhando-com-numeros","text":"Inteiros: Para evitar integer overflow , use sempre long long (64bits) ao inv\u00e9s de int . Reais: Use double (64bits) ou long double (80bits). Esque\u00e7a o float \ud83d\ude05. Al\u00e9m disso, nunca compare dois double com o operador == (\u00e9 poss\u00edvel que os valores sejam iguais, mas n\u00e3o s\u00e3o devido a erros de precis\u00e3o). Para verificar se dois double use o c\u00f3digo a seguir: 1 2 3 4 5 6 double a , b ; ... if ( abs ( a - b ) < 1e-9 ) { //a e b s\u00e3o iguais } ... Para saber mais: Data Types","title":"Trabalhando com n\u00fameros"},{"location":"inicio/#simplificando-o-codigo","text":"","title":"Simplificando o c\u00f3digo"},{"location":"inicio/#nomes-de-tipos","text":"Usando o comando typedef \u00e9 poss\u00edvel dar um nome mais curto a um tipo de dado. Por exemplo: 1 2 3 4 5 6 7 typedef long long ll ; typedef vector < int > vi ; typedef vector < ll > vll ; typedef pair < int , int > pi ; typedef pair < ll , ll > pll ; typedef vector < pii > vpi ; typedef vector < pll > vpll ;","title":"Nomes de tipos"},{"location":"inicio/#macros","text":"Uma macro significa que certas palavras no c\u00f3digo ser\u00e3o substitu\u00eddas antes da compila\u00e7\u00e3o. Em C++, as macros s\u00e3o definidas usando a palavra-chave #define . Veja alguns exemplos: 1 2 3 4 5 6 7 8 9 10 11 #define F first #define S second #define PB push_back #define MP make_pair #define FOR(i,a,b) for(ll i = (a); i < (ll)(b); ++i) #define INF 0x3f3f3f3f #define INFLL 0x3f3f3f3f3f3f3f3f #define all(x) x.begin(),x.end() #define sz(x) (ll)x.size() #define MOD 1000000007ll #define endl '\\n' Assim, por exemplo, o c\u00f3digo for ( long long i = 0 ; i < n ; ++ i ) pode ser simplificado por FOR ( i , 0 , n ) .","title":"Macros"},{"location":"inicio/#manipulacao-de-bits","text":"","title":"Manipula\u00e7\u00e3o de bits"},{"location":"inicio/#dicas-e-truques-de-c","text":"A seguir, s\u00e3o listados alguns links com dicas e truques de C++ \u00fateis para programa\u00e7\u00e3o competitiva. Leia todos com aten\u00e7\u00e3o: C++ tips and tricks Top 20 C++ Tricks for Competitive Programming Truques de programa\u00e7\u00e3o competitiva para programadores de C++","title":"Dicas e truques de C++"},{"location":"matematica/","text":"Matem\u00e1tica Em constru\u00e7\u00e3o...","title":"Matem\u00e1tica"},{"location":"matematica/#matematica","text":"Em constru\u00e7\u00e3o...","title":"Matem\u00e1tica"},{"location":"ordenacao/","text":"Ordena\u00e7\u00e3o e Busca Em constru\u00e7\u00e3o...","title":"Ordena\u00e7\u00e3o e Busca"},{"location":"ordenacao/#ordenacao-e-busca","text":"Em constru\u00e7\u00e3o...","title":"Ordena\u00e7\u00e3o e Busca"},{"location":"pd/","text":"Programa\u00e7\u00e3o Din\u00e2mica Em constru\u00e7\u00e3o...","title":"Programa\u00e7\u00e3o din\u00e2mica"},{"location":"pd/#programacao-dinamica","text":"Em constru\u00e7\u00e3o...","title":"Programa\u00e7\u00e3o Din\u00e2mica"},{"location":"strings/","text":"Processamento de Strings Em constru\u00e7\u00e3o...","title":"Processamento de strings"},{"location":"strings/#processamento-de-strings","text":"Em constru\u00e7\u00e3o...","title":"Processamento de Strings"}]}